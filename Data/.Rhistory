my_vector
# We can also us the ':' operator to give us all numbers in a range (in this
# case between 1 and 10):
my_vector <- 35:50
# We can technically also use the '=' operator to assign values to variables,
# but this is typically considered bad form, because it is easy to confuse with
# the '==' operator. For now, lets stick to using '<-':
my_vector = 1:10
# We can index (get) elements of a vector by giving the position (as a positive
# integer) of the element in the vector. Note that all indexing in R starts from
# 1 and not zero, as in some other programming languages.
my_vector[5]
## Removing Variables, Setting Working Directory ##
# Clearing your workspace: this removes all data and variables current in your
# 'R Environment'. As you will see, when you create variables they will continue
# to be available to you for the rest of your R session once you have made them,
# unless you remove them from memory. The line of code below will remove
# everything from memory. This can be useful if you want to rerun several
# different scripts without closing R after using each one.
rm(list = ls())
# Set your working directory -- This is where R goes to look for files and save
# stuff by default. You will need to do this for each computer you run your
# script file on. In RStudio, you can go to 'Session' -> 'Set Working Directory'
# -> 'Choose Directory', and select a folder from a drop down menu. For me, this
# looks like:
setwd("~/Desktop")
### Part 2: Comparison Operators ###
## The Basic Operators ##
5 < 6 # 5 is less than 6: returns TRUE
5 > 6 # 5 is not greater than 6: returns FALSE
5 == 5 # 5 is equal to 5: returns TRUE
5 != 6 # 5 is not equal to 6: returns TRUE
5 <= 5 # 5 is less than or equal to 5: returns TRUE
## Comparisons with Variables ##
# R will also do its best to make two quantities comparable, even if one is a
# string and the other is a number:
5345 == "5345"
# However if we assign a value to a variable, then it will compare the value
# in the variable, not the name of the variable. This is also the first time
# we have seen variables. They have have any name composed of letters, '.' and,
# '_'. Variables can store lots of stuff --as we will see in future tutorials.
# In this example, we are assigning the number 5 to the variable 'i' using the
# assignment operator '<-':
i <- 5
i == "i" # 5 is not equal to "i": returns FALSE
# Now we assign a string ("i") to the variable 'i':
i <- "i"
i == "i" # "i" is equal to "i": returns TRUE
### Part 3: Printing ###
## The print() and cat() Functions ##
# Lets start by defining a vector:
my_vector <- c(5,34,76,13)
# We can look at what is in this variable by simply entering it into the
# console:
my_vector
# In addition to entering the variable name into the R console, we can also take
# a look at what is stored in a variable by using either the 'print()' or
# 'cat()' functions, which are built right into R:
print(my_vector)
cat(my_vector)
## cat() vs. print() ##
# The 'cat()' function will print things without "" marks around them, which
# often looks nicer, but it also does not skip to a new line if you call it
# multiple times inside of a function (something we will get to soon), or a
# loop. Lets try out both:
print("Hello World")
cat("Hello World")
# Now we can try them inside bracketts to see how 'cat()' does not break lines:
{
cat("Hello")
cat("World")
}
{
print("Hello")
print("World")
}
# So we have to manually break lines with 'cat()' using the "\n" (newline)
# symbol:
{
cat("Hello\n")
cat("World")
}
## The 'paste()' Function, and Generating Informative Messages ##
# The 'paste()' function takes as many string, number or variable arguments as
# you want and sticks them all together using a user specified separator:
# Lets define a variable to hold the number of fingers we have:
fingers <- 14
# Now lets print out how many fingers we have:
print(paste("Hello,", "I have", fingers, "fingers", sep = " "))
# Now lets separate with dashes just for fun:
print(paste("Hello,", "I have", fingers, "fingers", sep = "-----"))
# We can also try the same thing with 'cat()':
cat(paste("Hello,", "I have", fingers, "fingers", sep = " "))
# However, with 'cat()', we can just skip the paste part and it will print the
# stuff directly:
cat("Hello,", "I have", fingers, "Fingers", sep = " ")
# If we want 'cat()' to break lines while it is printing, we can also include
# the "\n" symbol at the end (or anywhere, for that matter):
cat("My Grocery List:\n", "1 dozen eggs\n",
"1 loaf of bread\n 1 bottle of orange juice\n",
"1 pint mass mocha", sep = " ")
### Using the help() Function ###
help(print)
help(sum)
?length
# Lets try out length() and sum():
my_vector <- c(1,2,3,4,5)
length(my_vector)
sum(my_vector)
# Lets try taking log() in base 2 or 10:
?log
log2(64)
log10(1000)
setwd("~/Box Sync/ICPSR_PDSaDM_2019/Scripts")
# 'for()' loops are a way to automate performing tasks by telling R how many
# times we want to do something. Along with conditional statments and comparison
# operators, loops are more powerful than you can immagine. Pretty much
# everything on your computer can be boiled down to a combinations of loops and
# conditionals.
# Here is an example 'for()' loop, with its English translation:
# for (           i in           1:10){
# for each number i in the range 1:10
# Lets try and example using a for() loop -- first lets create a vector:
my_vector <- c(20:30)
# Take a look at tis contents:
cat(my_vector)
# Notice how the value of i changes when we are inside the loop
i <- 76
# Loop over each index (position) in the vector at replace it with its square
# root:
for (i in 1:length(my_vector)) {
cat(i,"\n")
my_vector[i] <- sqrt(my_vector[i])
}
# Display the result:
cat(my_vector)
# Now lets try adding numbers together using a 'for()' loop:
my_num <- 0
for (i in 1:100) {
my_num <- my_num + i
cat("Current Iteration:",i,"my_num value:",my_num,"\n")
}
### If/Else Statements ###
# If/else statements give your computer a "brain", they let it see if somethng
# is the case, and dependent on that answer, your computer can then take some
# desired action.
# English translation of an if statement:
# if (some condition is met) {
#      do something
# }
# Lets try an example to check and see if our number is less than 20:
my_number <- 19
if (my_number < 20) {
cat("My number is less than 20 \n")
}
# Now we try an example where the condition is not satisfied:
my_number <- 22
if (my_number < 20) {
cat("My number is less than 20 \n")
}
# You can also add in an 'else' statement to do something only if the condition
# is not met:
if (my_number < 20) {
cat("My number is less than 20 \n")
} else {
cat("My number is at least 20 \n")
}
### Conditionals in Loops ###
# A more complex example using an 'if()' statement inside of a 'for()' loop:
my_vector <- c(20:30)
for (i in 1:length(my_vector)) {
cat("Current Index:",i,"Value:",my_vector[i],"\n")
if (my_vector[i] == 25) {
cat("The square root is 5! \n")
}
}
# Another example with and If/Else statement:
my_vector <- c(20:30)
for (i in 1:length(my_vector)) {
cat("Current Index:",i,"Value:",my_vector[i],"\n")
if (my_vector[i] == 25) {
print("I am 25!")
} else {
print("I am not 25!")
}
}
### Nested Looping, An Example with Real Data ###
# Lets read in some data (first make sure your working directory is set to the
# folder where the data are stored):
setwd("~/Box Sync/ICPSR_PDSaDM_2019/Data")
load("Looping_Conditionals_Example_Data.RData")
# In this example, we are going to work with a dataset of metadata on all bills
# introduced in the United States Congress between 2011-2012. It contains
# indicators of the number of cosponsors, the month the bill was introduced, the
# chamber it was introduced in (House or Senate), the topic code (see reference
# list below), and the party of the sponsor.
# Let's say we wanted to look at a subset of all bills that were introduced in
# the House that were about any of the first ten topics, and then take the sum
# of the number of bills introduced by each party that passed the house. This
# would give us an extremely crude measure of how effective each party was on
# these issues.
# Topic codes:
# 1. Macroeconomics
# 2. Civil Rights, Minority Issues, and Civil Liberties
# 3. Health
# 4. Agriculture
# 5. Labor and Employment
# 6. Education
# 7. Environment
# 8. Energy
# 9. Immigration
# 10. Transportation
# 12. Law, Crime, and Family Issues
# 13. Social Welfare
# 14. Community Development and Housing Issues
# 15. Banking, Finance, and Domestic Commerce
# 16. Defense
# 17. Space, Science, Technology and Communications
# 18. Foreign Trade
# 19. International Affairs and Foreign Aid
# 20. Government Operations
# Let's start by subsetting our data -- we only want HR bills with a topic code
# less than or equal to 10:
reduced_data <- data[which(data$Bill_Type == "HR" & data$Topic_Code <= 10),]
# Now we allocate a blank matrix to hold the statistics we plan to calculate. It
# should have two columns (Democrat and Republican), and 10 rows (one for each
# topic):
party_topic_statistics <- matrix(0,
nrow = 10,
ncol = 2)
colnames(party_topic_statistics) <- c("Democrat","Republican")
rownames(party_topic_statistics) <- c("Macroeconomics", "Civil Rights", "Health",
"Agriculture", "Labor", "Education",
"Environment", "Energy", "Immigration",
"Transportation")
# At the highest level, we need to loop over topics:
for (i in 1:10) {
# Now for each topic we loop over parties:
for (j in 1:2) {
# Set the variable we are going to lookup against for party ID:
if (j == 1) {
party <- 100 # Code for a Democrat sponsored bill
} else {
party <- 200 # Code for a Republican sponsored bill
}
# Subset our data down to the current party/topic combination:
current_data <- reduced_data[which(reduced_data$Sponsor_Party == party &
reduced_data$Topic_Code == i),]
# Check to make sure that there are more than zero observations for the
# current party/topic combination:
if (nrow(current_data) > 0) {
# Now subset to those bills that passed the House:
passed_house <- current_data[which(current_data$Passed_House == 1),]
# Find the number of rows in the reduced dataset:
party_topic_statistics[i,j] <- nrow(passed_house)
}
}
}
# Take a look!
party_topic_statistics
# Some preliminaries:
rm(list = ls())
# Set your working directory to the "Senate_Cosponsorship" subdirectory of the
# "Data" directory associated with this workshop. For me, this looks like:
setwd("~/Box Sync/ICPSR_PDSaDM_2019/Data/Senate_Cosponsorship")
# We are going to be looking at a dataset that comprises legislative
# cosponsorship activity for 11 sessions of the U.S. Senate (22 years). It is
# broken up into 11 .csv files, which we will need to read in one at a time. The
# list.files() function can help us do this. It will return a list of all files
# in a folder as a character vector. We can use this vector to read in
# the files by name. They key thing is to make sure that there are not any
# files you do not want to read in in the folder, or to remove those afterward:
filenames <- list.files()
# These data are arranged in the following format: There is one row for each
# Senator (in a given session of Congress), and one column for each piece of
# legislation introduced in that session of Congress. The [i,j] entries in this
# matrix are equal to 1 if the i'th Senator was the "sponsor" of a bill --
# meaning that they wrote it, and 2 if the i'th Senator was a "cosponsor" of the
# bill (meaning they declared their formal, public support for it). The goal
# here is for each session of Congress, to construct a Senators x Senators
# matrix recording the number of times Senator i cosponsored a piece of
# legislation sponsored by senator j. We call this a sociomatrix, or
# adjacency matrix.
# Let's begin by loading in some data:
cat("Loading Data... \n")
# Create a list object to store the raw data in:
cosponsorship_data <- vector(mode = "list",
length = length(filenames))
# Loop over sessions of Congress:
for (i in 1:length(filenames)) {
# Let ourselves know about progress:
cat("Currently working on file:",i,"\n")
# Read in the current dataset:
temp <- read.csv(filenames[i],
stringsAsFactors = F,
header = F) # there are no column names in the raw data.
# let's set some column names using 'paste()' for fun:
colnames(temp) <-  paste("Bill",1:ncol(temp), sep = "_")
# We are only going to look at the first 100 bills from each Congress to
# save time. Alternatively, we could look at all of them:
temp <- temp[,1:100]
cosponsorship_data[[i]]$raw_data <- temp
cosponsorship_data[[i]]$filename <- filenames[i]
}
# now let's set names for each list entry
names(cosponsorship_data) <-  paste("Congress",100:110, sep = "_")
### Processing Multiple Datasets ###
cat("Transforming Raw Data Into Cosponsorship Matrices...\n")
# Loop over sessions of Congress:
for (i in 1:length(filenames)) {
# Let the user know what iteration we are on:
cat("Currently on dataset number:",i,"\n")
# Extract the raw data so we can use it:
temp <- cosponsorship_data[[i]]$raw_data
# Create a sociomatrix to populate. Each entry in this matrix will record
# the number of times Senator i cosponsored a bill introduced by Senator j.
num_senators <- nrow(temp)
temp_sociomatrix <- matrix(0,
ncol = num_senators,
nrow = num_senators)
# This is an example of nested looping:
for (j in 1:ncol(temp)) { # For every bill:
# Find out who the bill sponsor is (coded as a 1):
for (k in 1:nrow(temp)) { # For every Senator:
if (temp[k,j] == 1) {
sponsor <- k
}
}
# Find all of the cosponsors:
for (k in 1:nrow(temp)) { # For every Senator
if (temp[k,j] == 2) {
temp_sociomatrix[k,sponsor] <- temp_sociomatrix[k,sponsor] + 1
}
}
}
# Store the sociomatrix in a new field:
cosponsorship_data[[i]]$sociomatrix <- temp_sociomatrix
}
# Let's have a little bit of fun plotting these networks:
# First, we will need a package for handling network data:
install.packages("statnet", dependencies = TRUE)
library(statnet)
# We are going to define a function that takes a year and a color and makes a
# network plot
netplot <- function(session,
color,
data_list = cosponsorship_data){
# Create an objet of class "network" that can be used by statnet to generate
# a network plot:
net <- network::as.network(data_list[[session]]$sociomatrix)
# When we give 'plot()' a network object, it returns a network plot:
plot(net, vertex.col = color)
# Wait for one second after plotting before moving on:
Sys.sleep(1)
# This function does not return anything.
}
# Now we are going to use a for() loop to plot these networks
for (i in 1:11) {
netplot(i,i)
}
### Automating Tasks Using Functions ###
# So all of what we did above was suited to our particular data, but what
# happens if we want to do the same thing to a different dataset? Well we could
# go in an change our code to make it work for that dataset, or we could
# enclose it in functions so it is easy to apply it to other datasets. One of
# the key concepts here, is that the functions we write can call other functions
# we have also written, making our code more flexible and extensible. Below, I
# am going to rewrite the above code by warpping it in a series of functions
# that I can then use to replicate the process of reading in and preprocessing
# the network data:
# It is always best to start with the lowest level functions we want to work
# with. In this case, those would be a function to read in a single dataset,
# and a function to deal with a single bill (determining the cosponsors, if any).
read_in_dataset <- function(filename, # the name of the file we want to read in.
has_header, # option for whether file includes a header.
columns_to_keep) { # number of columns to keep in dataset.
# Assumes a .csv file, but could be modified to deal with other file types:
temp <- read.csv(filename,
stringsAsFactors = F,
header = has_header)
# let's set some column names using 'paste()' for fun:
colnames(temp) <-  paste("Bill",1:ncol(temp), sep = "_")
# If columns_to_keep was NULL, set it to the number of columns in the dataset.
if (is.null(columns_to_keep)) {
columns_to_keep <- ncol(temp)
}
temp <- temp[,1:columns_to_keep]
return(temp)
}
# Now let's define a function for extracting cosponsorship information from a
# dataset and putting it in a cosponsorship matrix:
generate_cosponsorship_matrix <- function(raw_data) {
# Get the number of legislators:
num_legislators <- nrow(raw_data)
# Create a sociomatrix:
sociomatrix <- matrix(0,
ncol = num_legislators,
nrow = num_legislators)
# Loop through bills (columns)
for (j in 1:ncol(raw_data)) {
# If there are a lot of bills, then we may want to check in with the
# user periodically to let them know about progress:
if (j %% 1000 == 0) {
cat("Working on bill",j,"of",ncol(raw_data),"\n")
}
# Find out who the bill sponsor is (coded as a 1):
for (i in 1:nrow(raw_data)) {
if (raw_data[i,j] == 1) {
sponsor <- i
}
}
# Find all of the cosponsors:
for (i in 1:nrow(raw_data)) {
if (raw_data[i,j] == 2) {
sociomatrix[i,sponsor] <- sociomatrix[i,sponsor] + 1
}
}
}
return(sociomatrix)
}
# Now we define a function that calls these two functions to do everything:
load_and_preprocess_cosponsorship_data <- function (filenames,
has_header = FALSE,
columns_to_keep = NULL) {
# Create a list object to store the raw and preprocessed data:
data_list <- vector(mode = "list",
length = length(filenames))
# Loop over files and load/preprocess them
for (i in 1:length(filenames)) {
cat("Reading in file",i,"\n")
data_list[[i]]$raw_data <- read_in_dataset(filenames[i],
has_header,
columns_to_keep)
cat("Preprocessing file",i,"\n")
data_list[[i]]$sociomatrix <- generate_cosponsorship_matrix(data_list[[i]]$raw_data)
}
# Give list entries some basic names:
names(data_list) <-  paste("Dataset",1:length(filenames), sep = "_")
# Now just return everything
return(data_list)
}
# Lets try it out!
cosponsorship_data_2 <- load_and_preprocess_cosponsorship_data(filenames,
columns_to_keep = 100)
# check to see if we get the same results:
names(cosponsorship_data) <- paste("Dataset",1:length(filenames), sep = "_")
all.equal(cosponsorship_data,cosponsorship_data_2)
rm(list = ls())
# Set your working directory:
setwd("~/Box Sync/ICPSR_PDSaDM_2019/Data")
# Load in the example data in long format:
load("Long_Wide_Data.RData")
library(tidyr)
### Converting Long Data to Wide Data ###
# We use the spread function to convert long data to wide format:
wide_data <- tidyr::spread(data = long_data, # the dataset we want to convert
key = Section, # the new column names
value = Terms)
long_data$Section <- paste("Section",long_data$Section,sep = "_")
# Lets make the wide data again:
wide_data <- tidyr::spread(data = long_data,
key = Section,
value = Terms)
format_var_names <- function(numbers,
prefix = "Section") {
# turn nubmers into characters
numbers <- as.character(numbers)
# get the maximum number of digits in the numbers
max_digits <- max(nchar(numbers))
# loop over each nubmer and add leading zeros where necessary
for (i in 1:length(numbers)) {
# get the number of characters (digits) in the current number
nc <- nchar(numbers[i])
# create a string with the right number of zeros to tack on the front
# of this string
add_zeros <- paste0(rep("0",max_digits - nc), collapse = "")
# tack on the zeros in front (where necessary), and assign back to the
# appropriate slot in numbers
if (length(add_zeros) > 0) {
numbers[i] <- paste(add_zeros, numbers[i], sep = "")
}
}
# now paste together the prefix and the numbers
numbers <- paste("Section",numbers,sep = "_")
# return the correct numbers
return(numbers)
}
# Reload in data:
load("Long_Wide_Data.RData")
# These column names aren't very helpful, lets try to make them better:
long_data$Section <- format_var_names(long_data$Section)
# Lets make the wide data again:
wide_data <- tidyr::spread(data = long_data,
key = Section,
value = Terms)
### Converting Wide Data to Long Data ###
long_data_2 <- tidyr::gather(data = wide_data, # The wide dataset.
key = Section, # The name of the new key column.
value = Terms, # The name for the new values column.
Section_001:Section_816) # The columns to be converted to long format.
# now we need to remove all of the observations containing an NA in the 'Terms'
# column:
to_remove <- which(is.na(long_data_2$Terms))
long_data_2 <- long_data_2[-to_remove,]
# We can also sort by Bill name, to get back to something that looks like our
# original dataset:
long_data_2 <- long_data_2[order(long_data_2$Bill),]
View(wide_data)
setwd("~/Box Sync/ICPSR_PDSaDM_2019/Data")
# Read in the data
library(rio)
Messy_Data <- import("Messy_Data.csv")
