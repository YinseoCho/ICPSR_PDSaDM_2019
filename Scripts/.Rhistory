View(my_data)
my_data$Grades
my_data$Grades == "A"
# The 'which()' function lets us identify observations that meet a certain
# criteria. This example also introduces the '$' operator which lets us access a
# variable in a data frame by name:
which(my_data$Grades == "A")
# The 'which()' function lets us identify observations that meet a certain
# criteria. This example also introduces the '$' operator which lets us access a
# variable in a data frame by name:
which(my_data$Grades == "a")
# The 'which()' function lets us identify observations that meet a certain
# criteria. This example also introduces the '$' operator which lets us access a
# variable in a data frame by name:
which(my_data$Grades == "A")
# Now we can create a new dataset that only includes A or B students by saving
# the indexes of the A and B students and then using them to extract a subset of
# the full data:
A_students <- which(my_data$Grades == "A")
B_students <- which(my_data$Grades == "B")
View(my_data)
View(my_data)
students_for_reduced_dataset <- c(A_students, B_students)
# We now use the vector to index only the rows we want, and extract them, saving
# them to a new object. Note that we index by [row,column], and if we leave one
# of these fields blank, then we take the entire row (or column).
reduced_data <- my_data[students_for_reduced_dataset,]
View(reduced_data)
# The 'which()' function lets us identify observations that meet a certain
# criteria. This example also introduces the '$' operator which lets us access a
# variable in a data frame by name:
which(my_data$Grades == "A" & my_data$Class == 1)
View(my_data)
rm(list = ls())
# Lets try and example using a for() loop -- first lets create a vector:
my_vector <- c(20:30)
my_vector
# Take a look at tis contents:
cat(my_vector)
source('~/Box Sync/ISSR_Data_Management_Web_Scraping_2018/Scripts/Looping_and_Conditional_Statements.R', echo=TRUE)
1:length(my_vector)
rm(list = ls())
my_vector <- c(20:30)
# Take a look at tis contents:
cat(my_vector)
for (i in 1:length(my_vector)) {
cat(i,"\n")
# my_vector[i] <- sqrt(my_vector[i])
}
i <- 76
for (i in 1:length(my_vector)) {
cat(i,"\n")
# my_vector[i] <- sqrt(my_vector[i])
}
my_vector
for (i in 1:length(my_vector)) {
cat(i,"\n")
my_vector[i] <- sqrt(my_vector[i])
}
my_vector
# Display the result:
cat(my_vector)
# Now lets try adding numbers together using a 'for()' loop:
my_num <- 0
i = 1
my_num <- my_num + i
my_num <- 0
for (i in 1:100) {
my_num <- my_num + i
cat("Current Iteration:",i,"my_num value:",my_num,"\n")
}
# Lets try an example to check and see if our number is less than 20:
my_number <- 19
my_number < 20
if (my_number < 20) {
cat("My number is less than 20 \n")
}
my_number <- 22
if (my_number < 20) {
cat("My number is less than 20 \n")
}
if (my_number < 20) {
cat("My number is less than 20 \n")
} else {
cat("My number is at least 20 \n")
}
# Lets try an example to check and see if our number is less than 20:
my_number <- 19
if (my_number < 20) {
cat("My number is less than 20 \n")
} else {
cat("My number is at least 20 \n")
}
# A more complex example using an 'if()' statement inside of a 'for()' loop:
my_vector <- c(20:30)
i = 1
cat("Current Index:",i,"Value:",my_vector[i],"\n")
for (i in 1:length(my_vector)) {
cat("Current Index:",i,"Value:",my_vector[i],"\n")
if (my_vector[i] == 25) {
cat("The square root is 5! \n")
}
}
my_vector <- c(20:30)
for (i in 1:length(my_vector)) {
cat("Current Index:",i,"Value:",my_vector[i],"\n")
if (my_vector[i] == 25) {
print("I am 25!")
} else {
print("I am not 25!")
}
}
setwd("~/Box Sync/ISSR_Data_Management_Web_Scraping_2018/Data")
load("Looping_Conditionals_Example_Data.RData")
setwd("~/Desktop")
load("Looping_Conditionals_Example_Data.RData")
setwd("~/Box Sync/ISSR_Data_Management_Web_Scraping_2018/Data")
load("Looping_Conditionals_Example_Data.RData")
View(data)
data$Bill_Title[1:2]
View(data)
# Let's start by subsetting our data -- we only want HR bills with a topic code
# less than or equal to 10:
reduced_data <- data[which(data$Bill_Type == "HR" & data$Topic_Code <= 10),]
View(reduced_data)
party_topic_statistics <- matrix(0,
nrow = 10,
ncol = 2)
colnames(party_topic_statistics) <- c("Democrat","Republican")
rownames(party_topic_statistics) <- c("Macroeconomics", "Civil Rights", "Health",
"Agriculture", "Labor", "Education",
"Environment", "Energy", "Immigration",
"Transportation")
View(party_topic_statistics)
View(party_topic_statistics)
View(reduced_data)
View(reduced_data)
i = 1
j = 1
# Set the variable we are going to lookup against for party ID:
if (j == 1) {
party <- 100 # Code for a Democrat sponsored bill
} else {
party <- 200 # Code for a Republican sponsored bill
}
current_data <- reduced_data[which(reduced_data$Sponsor_Party == party &
reduced_data$Topic_Code == i),]
View(current_data)
# Now subset to those bills that passed the House:
passed_house <- current_data[which(current_data$Passed_House == 1),]
nrow(passed_house)
for (i in 1:10) {
# Now for each topic we loop over parties:
for (j in 1:2) {
# Set the variable we are going to lookup against for party ID:
if (j == 1) {
party <- 100 # Code for a Democrat sponsored bill
} else {
party <- 200 # Code for a Republican sponsored bill
}
# Subset our data down to the current party/topic combination:
current_data <- reduced_data[which(reduced_data$Sponsor_Party == party &
reduced_data$Topic_Code == i),]
# Check to make sure that there are more than zero observations for the
# current party/topic combination:
if (nrow(current_data) > 0) {
# Now subset to those bills that passed the House:
passed_house <- current_data[which(current_data$Passed_House == 1),]
# Find the number of rows in the reduced dataset:
party_topic_statistics[i,j] <- nrow(passed_house)
}
}
}
# Take a look!
party_topic_statistics
View(party_topic_statistics)
# The easiest way to set your working directory is to go to:
# Session -> Set Working Directory -> Choose Directory... and select the folder
# where you would like to set it. This will look different on each computer, so
# you will need to follow the directions for your computer. For example, if I
# wanted to set my working directory to my "Desktop" folder on my computer, I
# could follow the instructions above, set my working directory to the desktop
# folder, and RStudio would enter the command in my R Console. For me, this
# would look like:
setwd("~/Desktop")
rm(list = ls())
# If I wanted to save some data using the save() function, this is where it
# would go:
my_vec <- 1:1000
save(my_vec, file = "my_vec.RData")
# Works!
rm(list = ls())
load("my_vec.RData")
my_vec
# set my working directory somewhere else:
setwd("~/Dropbox")
# Does not work!
rm(list = ls())
# Trying to load in the data fails:
load("my_vec.RData")
# Try setting your working directory to a folder that does not exist:
setwd("~/Desktop/sdkfhskdhfllgkjsddf")
student_id <- c(1:10)
grades <- c("A","B","C","A","C","F","D","B","B","A")
class <- c(rep(0,times = 5),rep(1,times = 5))
free_lunch <- rep(TRUE,times = 10)
my_data <- data.frame(student_id,
grades,
class,
free_lunch,
stringsAsFactors = FALSE)
View(my_data)
colnames(my_data) <- c("Student_ID", "Grades","Class","Free_Lunch")
rownames(my_data) <- LETTERS[11:20]
# The easiest way to set your working directory is to go to:
# Session -> Set Working Directory -> Choose Directory... and select the folder
# where you would like to set it. This will look different on each computer, so
# you will need to follow the directions for your computer. For example, if I
# wanted to set my working directory to my "Desktop" folder on my computer, I
# could follow the instructions above, set my working directory to the desktop
# folder, and RStudio would enter the command in my R Console. For me, this
# would look like:
setwd("~/Desktop")
write.csv(x = my_data,
file = "school_data.csv",
row.names = FALSE)
school_data <- read.csv(file = "school_data.csv",
stringsAsFactors = FALSE, # Always!!!
sep = ",")
View(school_data)
View(my_data)
install.packages("rio", dependencies = TRUE)
# Now we have to actually load the package so we can use it. We do this using
# the library() command:
library(rio)
# Write our school children data to an .xlsx file:
export(my_data, "school_data.xlsx")
# Now we can read in our data from the excel file:
excel_school_data <- import("school_data.xlsx")
View(excel_school_data)
export(my_data, "school_data.dta")
# Then read it back in:
stata_school_data <- import("school_data.dta")
save(list = c("my_data", "school_data"), file = "Two_objects.RData")
save(list = ls(), file = "MyData.RData")
# Now lets test it out by clearing our whole workspace:
rm(list = ls())
# Now we can load the data back in! It is good practice to set our working
# directory again first (remember to change this to the folder location where
# you downloaded the workshop materials or saved this script file!):
setwd("~/Desktop")
# Load in the two objects
load(file = "Two_objects.RData")
# Load in everything
load(file = "MyData.RData")
# First we need to download the 'rio' package, we can either do this manually
# or by using the package manager in base R. You can check this package out by
# visiting the development Github page: https://github.com/leeper/rio. You need
# to make sure you select 'dependencies = TRUE' so that you download the other
# packages that your package depends on, otherwise it will not work! Here is the
# manual way of installing an R package:
install.packages("lme4", dependencies = TRUE)
first_function <- function(number) {
print(number + 1000)
}
my_column_sum <- function(col_number,
my_matrix) {
# Take the column sum of the matrix:
col_sum <- sum(my_matrix[,col_number])
# We always include a return statement at the end of the function which
# gives us back whatever the function computed. Note that we can only return
# one object (variable) in this return statement:
return(col_sum)
}
first_function(10)
first_function(-1020)
coolest_number <- 567
first_function(coolest_number)
my_mat <- matrix(1:100,
nrow = 10,
ncol = 10)
View(my_mat)
# Look at our matrix:
my_mat
temp <- my_column_sum(col_number = 1,
my_matrix = my_mat)
# Lets double check our result:
sum(my_mat[,1])
my_column_sum(1,my_mat)
my_column_sum(my_mat,1)
# Now we use 'my_column_sum()' to take the sum of all elements in the first
# column:
temp <- my_column_sum(my_matrix = my_mat,col_number = 1)
for (i in 1:10) {
colsum <- my_column_sum(col_number = i,
my_matrix = my_mat)
cat(colsum,"\n")
}
colSums(my_mat)
first_function <- function(number = 10) {
print(number + 1000)
}
first_function()
my_mat <- matrix(1:100,
ncol = 10,
nrow = 10)
argument1 <- my_mat
class(argument1)
class(argument1[1,1])[1]
argument2 = 10
length(argument2)
if (class(argument1)[1] != "matrix") {
}
}
}
if (length(argument2) != 1) {
stop("argument2 must be of length 1.")
}
stop("argument2 must be of length 1.")
if (class(argument2)[1] != "numeric") {
stop("argument2 must be a number!")
}
do_more_stuff <- FALSE
argument3 = NULL
is.null(argument3)
is.null(argument3)
!is.null(argument3)
argument1
argument2
argument1 + argument2
argument1 + argument1
argument1
argument1 + argument2
argument1 <- argument1 + argument2
argument1
total <- sum(argument1)
template <- function (argument1,
argument2 = 10, # default argument
argument3 = NULL # NULL argument
) {
# It is often a good idea to check the types of variables you are passing
# in to functions. This can prevent you from introducing bugs into your
# code.
# For example, lets make sure the first argument is a matrix
if (class(argument1)[1] != "matrix") {
# the stop() function will halt execution if it is called.
stop("argument1 must be a matrix!")
}
# We may also want to check to make sure it is a numeric matrix. To do so
# we will need to check against both "numeric" and "integer" types in the
# first cell:
if (class(argument1[1,1])[1] != "numeric" &
class(argument1[1,1])[1] != "integer") {
# the stop() function will halt execution if it is called.
stop("argument1 must be a numeric matrix!")
}
# Now lets make sure that a single number is provided as argument2.
# First we make sure it is of length 1
if (length(argument2) != 1) {
stop("argument2 must be of length 1.")
}
# Now make sure it is numeric.
if (class(argument2)[1] != "numeric") {
stop("argument2 must be a number!")
}
# Check to see if argument 3 was NULL. If it was, do not do more stuff,
# but if it was not NULL, do more stuff.
do_more_stuff <- FALSE
if (!is.null(argument3)) {
do_more_stuff <- TRUE
if (class(argument3)[1] != "character") {
stop("argument3 must be a string, if it is provided.")
}
}
# Let the user know all variables checked out:
cat("All variables look good!\n")
# Now actually do stuff:
# Start by adding argument2 to each element of the matrix:
argument1 <- argument1 + argument2
# Now let's calcuate the sum:
total <- sum(argument1)
# If argument3 was provided:
if (do_more_stuff) {
# Visit each cell in the matrix
for (i in 1:nrow(argument1)) {
for (j in 1:ncol(argument1)) {
cat("The cell at [",i,",",j,"] contains ",argument1[i,j]," ",
argument3,"s \n",sep = "")
}
}
}
# now return the updated matrix in argument1, and argument3 together in a
# list object
to_return <- list()
to_return$argument1 <- argument1
to_return$argument3 <- argument3
# We can only return one object, so a list can help work around this
# limitation:
return (to_return)
}
my_mat <- matrix(1:100,
ncol = 10,
nrow = 10)
template(my_mat)
temp <- template(my_mat)
View(temp)
temp <- template(my_mat,
argument2 = 20)
View(temp)
template(my_mat,
argument2 = 20)
temp <- template(my_mat,
argument2 = 1000,
argument3 = "koala bear")
View(my_mat)
template <- function (argument1,
argument2 = 10, # default argument
argument3 = NULL # NULL argument
) {
# It is often a good idea to check the types of variables you are passing
# in to functions. This can prevent you from introducing bugs into your
# code.
# For example, lets make sure the first argument is a matrix
if (class(argument1)[1] != "matrix") {
# the stop() function will halt execution if it is called.
stop("argument1 must be a matrix!")
}
# We may also want to check to make sure it is a numeric matrix. To do so
# we will need to check against both "numeric" and "integer" types in the
# first cell:
if (class(argument1[1,1])[1] != "numeric" &
class(argument1[1,1])[1] != "integer") {
# the stop() function will halt execution if it is called.
stop("argument1 must be a numeric matrix!")
}
# Now lets make sure that a single number is provided as argument2.
# First we make sure it is of length 1
if (length(argument2) != 1) {
stop("argument2 must be of length 1.")
}
# Now make sure it is numeric.
if (class(argument2)[1] != "numeric") {
stop("argument2 must be a number!")
}
# Check to see if argument 3 was NULL. If it was, do not do more stuff,
# but if it was not NULL, do more stuff.
do_more_stuff <- FALSE
if (!is.null(argument3)) {
do_more_stuff <- TRUE
if (class(argument3)[1] != "character") {
stop("argument3 must be a string, if it is provided.")
}
}
# Let the user know all variables checked out:
cat("All variables look good!\n")
# Now actually do stuff:
# Start by adding argument2 to each element of the matrix:
argument1 <- argument1 + argument2
# Now let's calcuate the sum:
total <- sum(argument1)
# If argument3 was provided:
if (do_more_stuff) {
# Visit each cell in the matrix
for (i in 1:nrow(argument1)) {
for (j in 1:ncol(argument1)) {
cat("The cell at [",i,",",j,"] contains ",argument1[i,j]," ",
argument3,"s \n",sep = "")
}
}
}
# now return the updated matrix in argument1, and argument3 together in a
# list object
to_return <- list()
to_return$argument1 <- argument1
to_return$argument3 <- argument3
# We can only return one object, so a list can help work around this
# limitation:
return (to_return)
}
my_mat <- matrix(1:100,
ncol = 10,
nrow = 10)
# We do not need to give an argument name if there is only one required
# argument (one without a default value):
temp <- template(my_mat)
temp <- template(my_mat,
argument2 = 20)
temp <- template(my_mat,
argument2 = 1000,
argument3 = "koala bear")
temp <- template("catzzz rule",
argument2 = 1000,
argument3 = "koala bear")
my_catzz <- matrix("catttzzzzz",
ncol = 10,
nrow = 10)
temp <- template(my_catzz,
argument2 = 1000,
argument3 = "koala bear")
setwd("~/Box Sync/ISSR_Data_Management_Web_Scraping_2018/Scripts")
source('~/Box Sync/ISSR_Data_Management_Web_Scraping_2018/Scripts/Additional_Functions.R', echo=TRUE)
# Now use source() to load in additional user-defined functions:
source("Additional_Functions.R")
# Let's try out our function on some example data:
my_mat <- matrix(1:900,
nrow = 30,
ncol = 30)
nums_to_find <- c(1,47,450,2000)
find_positions(mat = my_mat,
numbers = nums_to_find)
# And for some fun, lets say hello:
say_hello("everyone")
